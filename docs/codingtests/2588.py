# 곱셈

# 문제
# (세 자리 수) × (세 자리 수)는 다음과 같은 과정을 통하여 이루어진다.
# (1)과 (2)위치에 들어갈 세 자리 자연수가 주어질 때 (3), (4), (5), (6)위치에 들어갈 값을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 (1)의 위치에 들어갈 세 자리 자연수가, 둘째 줄에 (2)의 위치에 들어갈 세자리 자연수가 주어진다.

# 출력
# 첫째 줄부터 넷째 줄까지 차례대로 (3), (4), (5), (6)에 들어갈 값을 출력한다.

# 문제풀이(Python)

# <방법 1>
# : 문자열을 이용한 풀이(반복문X)

A = int(input())
B = input()

print(A*int(B[2]))
print(A*int(B[1]))
print(A*int(B[0]))
print(A*int(B))

# (1) (2)
# 문자열 입력 함수 input()으로 A와 B에 저장할 정수값을 (문자열로) 입력받아
# A만 정수형으로 변환해주었고 B는 문자열 형태로 남겨두었습니다.

# 문자열은 문자열을 구성하는 문자에 접근할 수 있습니다.
# 따라서 세자리 곱셈의 중간과정에서 B의 각 자리수를 곱하여 더하는 과정을 표현할 수 있습니다.

# (3) (4) (5)
# 따라서 int(B[2])는 세자리 정수 B의 일의 자리 숫자,
# int(B[1])는 세자리 정수 B의 십의 자리 숫자,
# int(B[0])은 세자리 정수 B의 백의 자리 숫자가 됩니다.

# (6)
# 최종 결과값입니다.


# <방법 2>
# : 문자열을 이용한 풀이(반복문)
A = int(input())
B = input()

for i in range(3,0,-1):
    print(A*int(B[i-1]))

print(A*int(B))

# range 함수를 이용해 마지막부터 첫번째로 출력되게 하는 방법
# 방법 1의 과정을 for 반복문으로 나타낼 수 있습니다.
# range(3,0,-1)는 파이썬의 range 함수를 사용하여 3부터 시작해서 1까지의 정수를 생성하는 구문입니다.
# 3은 시작점을 나타냅니다.
# 0은 종료점을 나타내지만, range 함수는 종료점을 포함하지 않기 때문에 실제로 생성되는 정수는 이 값보다 하나 작습니다.
# -1은 스텝(증가 또는 감소하는 값)을 나타냅니다. 여기서는 -1이기 때문에 값이 1씩 감소합니다.
# 따라서 range(3,0,-1)은 3, 2, 1이라는 세 개의 정수를 차례대로 생성하는 것을 의미합니다.

# B[i-1]에 대한 설명을 먼저 드리겠습니다. 이는 문자열 B에서 i-1 위치에 있는 문자를 선택하는 구문입니다.
# 파이썬에서는 문자열도 인덱스를 통해 각 문자를 선택할 수 있습니다. 그리고 파이썬의 인덱싱은 0부터 시작하므로, i-1은 실제로 i번째 문자를 선택합니다.
# 그런 다음 int(B[i-1])는 선택한 문자를 정수로 변환합니다.
# int는 파이썬의 내장 함수로, 문자열이나 실수 등을 정수로 변환하는 역할을 합니다. 여기서는 B[i-1]에 의해 선택된 문자를 정수로 변환하고 있습니다.
# 마지막으로 A*int(B[i-1])는 변수 A와 int(B[i-1])의 곱을 계산합니다. 여기서 A는 정수이고, int(B[i-1])는 B의 i번째 문자를 정수로 변환한 값입니다.
# 따라서 A와 int(B[i-1])의 곱은 두 정수의 곱을 나타내게 됩니다.

# B[i-1]에서 B는 '385'이고, i는 range(3,0,-1)로 생성된 숫자입니다. 이 range 함수는 3, 2, 1의 값을 차례대로 생성합니다.
# 따라서 B[i-1]는 B의 i번째 문자를 선택하게 되는데, 파이썬의 인덱싱이 0부터 시작하므로 i-1이 실제로 해당하는 위치가 됩니다.
# i가 3일 때, B[i-1]는 B[2]가 되고, 이는 '385'의 세 번째 문자 '5'를 선택합니다.
# i가 2일 때, B[i-1]는 B[1]가 되고, 이는 '385'의 두 번째 문자 '8'를 선택합니다.
# i가 1일 때, B[i-1]는 B[0]가 되고, 이는 '385'의 첫 번째 문자 '3'를 선택합니다.
# 결론적으로 B[i-1]는 '5', '8', '3'을 차례대로 선택하게 됩니다.

# 입력값
# 472
# 385
# 출력값
# 2360
# 3776
# 1416
# 181720